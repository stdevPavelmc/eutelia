#!/bin/bash

# Eutelia, Mail server testiong script, get the latest version from
# https://github.com/stdevPavelmc/mailad/
#
# Copyright 2020 Pavel Milanes Costa <pavelmc@gmail.com>
# LICENCE: GPL 3.0 and later
#

## Vars
LOG=./eutelia.log
LOGP=./.eutelia.log
cat /dev/null > $LOG

# Reset the locales
LANGUAGE="en_US"
LC_ALL=C
LANG="en_US.UTF-8"
export LANGUAGE
export LC_ALL
export LANG

# options
MODE='INTERNAL'
LOCAL=''
NATIONAL=''
IMAP=''
SERVER=''
ATTACH=''

# points score
POINTS=0
MAXPOINTS=0

# eutelia frases
expressions_bad=(\
    "Pepito: no puedes inventar sin estudiar" \
    "Quieres un vasito de leche fresca para que pases la pena" \
    "Maria Silvia esto está en llamas" \
    "Mi coronel esto está pobrecito, pobrecito"\
    "Suave Pomarosa que este camino está malo, malo" \
    "¡Este, hombre, que vais a matar a uno aquí adentro!" \
    "¡Ay, mamacita qué dolor!" \
    "¡Alarma, pa to  el campamento!" \
    "Corneta, toque usted «A degüello»" \
    "¡Qué susto, Josú!" \
    "Se oye clarito, clarito: ¡retiradaaaaaa!" \
    "¡Muchaaaachooo, ven acá, condena o, que tú ta herío!" \
    "¡Bestia, qué estamos comiendo!" \
    "¡Váyase y domine ese rifle!" \
    "Este… hombre, que lo váis a matar a uno aquí adentro" \
    "¡Ño! María Silvia, vieja" \
    "Dice que él no habla" \
    "Oye, oye, la candela es aquí" \
    "Me vine de España para hacer papelazos" \
    "Oe Media, no te embarques" \
)
expression_regular=(\
    "Ves Pomarosa, ya esto está mejor" \
    "Quieres un vasito de leche por tu buen esfuerzo" \
    "Ese fusíl si tira pa arriba de los panchos" \
    "No se preocupe, Generá, que los vamos a hacé puré de talco." \
    "Yo le garantizo, mi “generá”, que en la próxima aventura lo hacemos papilla de tortilla de puré de talco" \
    "El caballo no habló, pero ha dicho que veremos muy pronto a Elpidio Valdés" \
    "Bueno qué, vamo'a fajarno..." \
    "Caballero, al machete y con la lù apagá" \
    "Tira pa que tú veas compay" \
    "Fuego y recontrafuego" \
    "Arriba caballero, que hay mucho machete que dar todavía " \
)
 expression_good=( \
    "Ahora si podemos hacer una guerra decente" \
    "Esto está bueno mi coronel" \
    "El machete es un hierro, compay" \
    "¡Adelante, leones hispanos, no os dejéis provocaarrr!" \
    "Palmiche cará, ese sí es un caballo de guerra" \
    "Aquí también 'aletta' lo 'mijmo'" \
    "Se llama di-na-mo, pa’ que lo sepa usté" \
    "Eres un genio Oliverio!" \
    "Adelante, mis leones hispanos" \
    "Toque usted a degüello" \
    "La contrainteligencia es la contrainteligencia chavá" \
    "Mira Fico, balas nuevecitas" \
)

# Main function
function main {
    # dependencies
    isswaks

    # config
    isconfig

    # parse options
    parseOptions "$@"

    # create a fake users email
    USER=`mktemp | cut -d '/' -f 3`

    # Action
    if [ "$MODE" == "INTERNAL" ] ; then
        # internal mode, default tests.

        # Server must not be available via SMTPS
        smtpConnectionFail

        # Server can be reached via SMTPS
        smtpsConnectionOk

        # Server must be reached via SUBMISSION
        submissionConnectionOk

        # Send an email to the mail admin with auth as sender
        submissionAsAdminToMySelf

        # Send an email to the outside as a valid user with auth
        submissionAsAdminToInet

        # Send an email via submission auth to a non existen domain email
        submissionToNonExistenLocalRecipient

        # Test submission auth with ID spoffing
        submissionLocalAuthNotSender

        # Open relay from inside?
        smtpOpenRelay

        # from non existen local sender (deny or ask password)
        smtpFromNonExistenLocalRecipient

        # national users sending
        if [ "$NATIONAL" != "" ] ; then
            # national sending to inet
            submissionAuthFromNationalToInet

            # national sending to national outside
            submissionAuthNAtionalToExternalNational
        fi

        # local users sending
        if [ "$LOCAL" != "" ] ; then
            # local sending to inet
            submissionAuthLocaltoInet

            # local to local
            submissionAuthLocalToLocal
        fi
    else
        # external mode

        # Simple email to valid recipient via SMTP
        smtpValidRecipient

        # reject nonexisten users (user unknow in virtual mailbox table)
        smtpToNonExistenLocalRecipient

        # from non existen local sender (deny or ask password)
        smtpFromNonExistenLocalRecipient

        # Open relay
        smtpOpenRelay

        # Testing SPF
        smtpImpersonatingServerSPF

        # Local valid user send local with no auth SMTP (must fail, need auth but no possible under SMTP) with no encryption
        smtpFromExistenLocalRecipientNoAuth
    fi

    # optional test no matter what mode

    # attachements
    if [ "$ATTACH" != "" ] ; then
        # test attachments limits smtps
        smtpAttachLimits

        # test attachments limits submission
        submissionAttachLimits
    fi

    #calculate the score
    SCCORE=$(( $POINTS * 100 / $MAXPOINTS ))
    SCORETXT="$POINTS/$MAXPOINTS"

    echo ""
    echo "===> Your final score is:"
    echo "     $SCORE % ($SCORETXT)"
    echo ""

    # random pick (eutelia phrase)
    RANDOM=$$$(date +%s)
    if [ $SCORE -lt 50 ] ; then
        # bad expressions_bad
        echo ${expressions_bad[$RANDOM % ${#expressions_bad[@]} ]}
    fi
    if [ $SCORE -gt 49 -a $SCORE -lt 90 ] ; then
        # bad expression_regular
        echo ${expression_regular[$RANDOM % ${#expression_regular[@]} ]}
    fi
    if [ $SCORE -gt 90 ] ; then
        # bad expressions_good
        echo ${expressions_good[$RANDOM % ${#expressions_good[@]} ]}
    fi
    exit 0
}

# header
function showHeader {
    # Notice header
    echo "Eutelia: Script for security tests on mail servers by @stdevPavelmc"
    echo "https://github.com/stdevPavelmc/eutelia"
    echo ""
}

# options parse
function parseOptions {
    while (( "$#" )); do
        case "$1" in
        -i|--internal)
            MODE='INTERNAL'
            shift
            ;;
        -e|--external)
            MODE='EXTERNAL'
            shift
            ;;
        -l|--localuser)
            LOCAL='1'
            shift
            ;;
        -n|--national)
            NATIONAL='1'
            shift
            ;;
        -a|--attachment)
            ATTACH='1'
            shift
            ;;
        -s|--server)
            if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                SERVER=$2
                shift 2
            else
                showHeader
                echo "Error: Argument for $1 is missing" >&2
                exit 1
            fi
            ;;
        -a|--attachment)
            if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                MESSAGESIZE=$2
                shift 2
            else
                showHeader
                echo "Error: Argument for $1 is missing" >&2
                exit 1
            fi
            ;;
        -*|--*=) # unsupported flags
            showHeader
            echo "Error: Unsupported flag $1" >&2
            exit 1
            ;;
        *) # preserve positional arguments
            PARAMS="$PARAMS $1"
            shift
            ;;
        esac
    done

    # set positional arguments in their proper place
    eval set -- "$PARAMS"

    # at least SERVER must be set
    if [ "$SERVER" == "" ] ; then
        # no server parameter
        showHeader
        usage
        exit 1
    else
        # show server to test
        m='Internal'
        if [ "$MODE" == "EXTERNAL" ] ; then
            m='External'
        fi
        showHeader
        echo "Testing server: $SERVER in mode: $m"
        echo ""
    fi
}

# usage function
function usage {
    echo "Usage: $0 [mode] [options]"
    echo ""
    echo "  [mode] is one of this two:"
    echo "      -i, --internal          [Default] Internal mode, you are a valid client"
    echo "                              of the domain"
    echo "      -e, --external          External mode, you are a enternal server"
    echo "                              delivering emails to the domian [or an attacker]"
    echo ""
    echo "  [options] some of this:"
    echo "      -s, --server [IP]       [Required] the IP or Hostname of the server to test"
    echo "      -l, --local             Run local users test"
    echo "      -n, --national          Run national user test"
    echo "      -a, --attachment [size] Run attachments size restrictions, size in MB"
    echo ""
    echo "Enjoy."
}

# test for swaks
function isswaks {
    SOFT=`which swaks`
    if [ "$SOFT" == "" ] ; then
        showHeader
        echo "Error: main tool not found: swaks"
        echo ""
        echo " A 'sudo apt install swaks' may help you out..."
        exit 1
    fi
}

# is config present?
function isconfig {
    if [ -r ./eutelia.conf ] ; then
        # source the config
        source ./eutelia.conf
    else
        showHeader
        echo "Error: No local config found"
        echo ""
        echo " A 'git reset --hard && git pull' may help you out..."
        echo "======================================================"
        exit 1
    fi
}

##### Mail testing functions

### connectivity

# check smtp connectivity fail
function smtpConnectionFail {
    echo "" >> $LOG
    echo "===> Testing if the server is reacheable via plain SMTP connections" >> $LOG

    $SOFT -s $SERVER --protocol SMTP -t "$TESTUSER" 2> /dev/null >> $LOGP
    R=$?
    if [ $R -ne 2 ] ; then
        # error
        echo "===> Error: Your server allows plain SMTP connections, see logs"

        echo "" >> $LOG
        echo "==========================================================" >> $LOG
        echo "ERROR: Server is reacheable via plain SMTP connections!" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: Users must interact wirh the server only via " >> $LOG
        echo "  secure protocols, use SUBMISSION (587) only please " >> $LOG
        echo "  block the access to SMTP (25)" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "==========================================================" >> $LOG
    else
        # ok
        echo "===> Ok: Your server does not allows plain SMTP connections" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# check ssmtp connectivity ok
function smtpsConnectionOk {
    echo "" >> $LOG
    echo "===> Testing if the server has SSMTP connectivity" >> $LOG

    $SOFT -s "$SERVER" --protocol SSMTP -t $TESTUSER > $LOGP
    R=$?
    if [ $R -eq 2 ] ; then
        # error
        echo "===> Error: The server can be reached via SMTPS (465) "

        echo "=======================================================" >> $LOG
        echo "ERROR: Can send a mail to a valid local email via SSMTP" >> $LOG
        echo "       with no authentication" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server bounce emails" >> $LOG
        echo "         via secure channel with no authentication," >> $LOG
        echo "         please check your configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "======================================================" >> $LOG
    else
        # ok
        echo "===> Ok: The server is reacheable via SMTPS (465)" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# check submisison conectivity via valid email with auth
function submissionConnectionOk {
    echo "" >> $LOG
    echo "===> Testing Submission with auth to valid user" >> $LOG

    $SOFT -s "$SERVER" -p 587 -tls -a PLAIN -au "$TESTUSER" -ap "$PASS" \
        -t "$TESTUSER" -f "$TESTUSER" > $LOGP
    R=$?
    if [ $R -eq 2 ] ; then
        # error
        echo "===> Error: Cant access the server via SUBMISSION (587)"

        echo "=========================================================" >> $LOG
        echo "ERROR: The server can't be reached via SUBMISSION (587)" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server can receive" >> $LOG
        echo "         emails for it's domain via SUBMISSION from an" >> $LOG
        echo "         authenticated user, please check your" >> $LOG
        echo "         configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "=========================================================" >> $LOG
    else
        # server is reacheable via SUBMISSION
        echo "===> Ok: Server is reacheable via SUBMISSION (587)" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}


### sending emails

# Simple email to valid recipient
function smtpValidRecipient {
    echo "" >> $LOG
    echo "===> Testing if the server allows SMTP mails to real recipients" >> $LOG

    $SOFT -s $SERVER --protocol SMTP -t $TESTUSER > $LOGP
    R=$?
    if [ $R -ne 0 ] ; then
        # error
        echo "===> Error: You can receive emails for your domain?"

        echo "======================================================" >> $LOG
        echo "ERROR: Can't send a mail to a valid local email using" >> $LOG
        echo "       simple SMTP (25)" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server can receive" >> $LOG
        echo "         emails for it's domain, please check your" >> $LOG
        echo "         configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "======================================================" >> $LOG
    else
        # you can receive
        echo "===> Ok: You can receive emails for your domain" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP > $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# Gmail impersonating, to trigger SPF
function smtpImpersonatingServerSPF {
    echo "" >> $LOG
    echo "===> Testing if the server honors SPF, impersonating a Gmail server" >> $LOG

    $SOFT -s $SERVER --protocol SMTP -t $TESTUSER -f "resoples@gmail.com" > $LOGP
    R=$?
    if [ $R -eq 0 ] ; then
        # error
        echo "===> Error: You servers has a no working SPF protection"

        echo "======================================================" >> $LOG
        echo "ERROR: We just sent an email from a local address as " >> $LOG
        echo "       if we where a gmail server, SPF is not working." >> $LOG
        echo " " >> $LOG
        echo "COMMENT: If you have a well configured SPF policy then" >> $LOG
        echo "         emails for servers that are not autenthic" >> $LOG
        echo "         servers for a domain must not be relayed." >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "======================================================" >> $LOG
    else
        # ok SPF is working
        echo "===> Ok: Your server has a working SPF protection in place" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP > $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# Send a Mail via submission to a valid user from a valid user using auth
function submissionAsAdminToMySelf {
    echo "" >> $LOG
    echo "===> Testing auth mails to myself" >> $LOG

    $SOFT -s "$SERVER" -p 587 -tls -a PLAIN -au "$TESTUSER" -ap "$PASS" \
        -t "$TESTUSER" -f "$TESTUSER" > $LOGP
    R=$?
    if [ $R -ne 0 ] ; then
        # error
        echo "===> Error: Authenticated users can not send local emails"

        echo "=========================================================" >> $LOG
        echo "ERROR: Can't relay a mail to a valid local recipient with" >> $LOG
        echo "       authentication (as sender) over SUBMISSION (587)" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server can receive" >> $LOG
        echo "         emails for it's domain via SUBMISSION from an" >> $LOG
        echo "         authenticated user, please check your" >> $LOG
        echo "         configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "=========================================================" >> $LOG
    else
        # can send
        echo "===> Ok: Authenticated users can send local emails" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# Send a mail from a valid user to the outside world
function submissionAsAdminToInet {
    echo "" >> $LOG
    echo "===> Testing if auth users can send emails to the outside world" >> $LOG

    $SOFT -s "$SERVER" -p 587 -tls -a PLAIN -au "$TESTUSER" -ap "$PASS" \
        -t "fake@example.com" -f "$TESTUSER"  > $LOGP
    R=$?
    if [ $R -ne 0 ] ; then
        # error
        echo "===> Error: Authenticated users can not send emails to the outside world"

        echo "==========================================================" >> $LOG
        echo "ERROR: Can't send a mail to an outside recipient using" >> $LOG
        echo "       authentication (as sender) from a local user over" >> $LOG
        echo "       SUBMISSION (587)" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server can send an email" >> $LOG
        echo "         to the outside world via SUBMISSION from an" >> $LOG
        echo "         authenticated local user, please check your" >> $LOG
        echo "         configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "==========================================================" >> $LOG
        cat $LOGP
        exit 1
    else
        # ok
        echo "===> Ok: Authenticated users can send emails to the outside world" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# Send a mail to a local recipient via smtp
function smtpToNonExistenLocalRecipient {
    echo "" >> $LOG
    echo "===> Testing if the server accepts emails for unknown recipients" >> $LOG

    USER=`mktemp | cut -d '/' -f 3`
    $SOFT -s $SERVER --protocol SMTP -t "$USER@$DOMAIN" > $LOGP
    R=$?
    if [ $R -ne 24 ] ; then
        # error
        echo "===> Error: Your server does not reject unknown recipients, see logs"

        echo "==========================================================" >> $LOG
        echo "ERROR: Can send a mail to a non-valid local email via SMTP" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server bounce mails for" >> $LOG
        echo "         unknown recipients of your domain, please check" >> $LOG
        echo "         your configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "=========================================================="  >> $LOG
    else
        # ok
        echo "===> Ok: Your server reject unknown recipients" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# Send a mail to a local recipient via smtp from a non existen local sender
function smtpFromNonExistenLocalRecipient {
    echo "" >> $LOG
    echo "===> Testing if the server accepts emails from unknown senders in his domain" >> $LOG

    USER=`mktemp | cut -d '/' -f 3`
    $SOFT -s $SERVER --protocol SMTP -t $TESTUSER -f "$USER@$DOMAIN" > $LOGP
    R=$?
    if [ $R -ne 24 ] ; then
        # error
        echo "===> Error: Your server does not reject unknown senders (SMTP), see logs"

        echo "==========================================================" >> $LOG
        echo "ERROR: Can send a mail to your domain from a non existen" >> $LOG
        echo "         sender in your domain." >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server does not allow" >> $LOG
        echo "         unknown users in your domain to sent emails" >> $LOG
        echo "         prease review your configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "=========================================================="  >> $LOG
    else
        # ok
        echo "===> Ok: Your server reject unknown senders in your domain" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# Send a mail to a local recipient from a valid local sender with no auth
function smtpFromExistenLocalRecipientNoAuth {
    echo "" >> $LOG
    echo "===> Testing if the server accepts emails from local users without auth (SMTP)" >> $LOG

    USER=`mktemp | cut -d '/' -f 3`
    $SOFT -s $SERVER --protocol SMTP -t "example@nonexistant.cu" -f $TESTUSER > $LOGP
    R=$?
    if [ $R -ne 24 ] ; then
        # error
        echo "===> Error: Your server does not reject unknown senders (SMTP), see logs"

        echo "==========================================================" >> $LOG
        echo "ERROR: Can send a mail from a local address with no auth" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server does not allow" >> $LOG
        echo "         known users in your domain to sent emails" >> $LOG
        echo "         if not authenticated" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "=========================================================="  >> $LOG
    else
        # ok
        echo "===> Ok: Your server refuse to relay valid sender emails with no auth" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# Send a mail to a local recipient via submission
function submissionToNonExistenLocalRecipient {
    echo "" >> $LOG
    echo "===> Testing if the server accepts emails for unknown recipients" >> $LOG

    USER=`mktemp | cut -d '/' -f 3`
    $SOFT -s "$SERVER" -p 587 -tls -a PLAIN -au "$TESTUSER" -ap "$PASS" \
        -t "$USER@$DOMAIN" -f "$TESTUSER"  > $LOGP
    R=$?
    if [ $R -ne 24 ] ; then
        # error
        echo "===> Error: Your server does not reject unknown recipients, see logs"

        echo "==========================================================" >> $LOG
        echo "ERROR: Can send a mail to a non-valid local email via SMTP" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server bounce mails for" >> $LOG
        echo "         unknown recipients of your domain, please check" >> $LOG
        echo "         your configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "=========================================================="  >> $LOG
    else
        # ok
        echo "===> Ok: Your server reject unknown recipients (Submission)" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# Test OpenRleay
function smtpOpenRelay {
    echo "" >> $LOG
    echo "===> Testing if you are an open relay" >> $LOG

    $SOFT -s $SERVER --protocol SMTP -t "$USER@example.com" -f "$USER@example.org" > $LOGP
    R=$?
    if [ $R -ne 24 ] ; then
        # error
        echo "===> Error: Your server is an open relay"

        echo "========================================================" >> $LOG
        echo "ERROR: Can relay a mail not for your domain and comming" >> $LOG
        echo "       from a external domain" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server does not relay" >> $LOG
        echo "         mails for other domains than the configured one" >> $LOG
        echo "         so you are an OPEN REALY server, and that is" >> $LOG
        echo "         bad, VERY BAD, please check your configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "========================================================" >> $LOG
    else
        # ok
        echo "===> Ok: Your server is not an open relay" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# Send and email to the admin via smtps
function smtpsToValidLocalRecipient {
    echo "" >> $LOG
    echo "===> Testing if you can send a SSMTP email to a valid recipient no auth" >> $LOG

    $SOFT -s "$SERVER" --protocol SSMTP -t $TESTUSER > $LOGP
    R=$?
    if [ $R -ne 24 ] ; then
        # error
        echo "===> Error: The server relaying mail though unauthenticated SMTPS"

        echo "=======================================================" >> $LOG
        echo "ERROR: Can send a mail to a valid local email via SSMTP" >> $LOG
        echo "       with no authentication" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server bounce emails" >> $LOG
        echo "         via secure channel with no authentication," >> $LOG
        echo "         please check your configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "======================================================" >> $LOG
    else
        # ok
        echo "===> Ok: The server rejects relaying mail though unauthenticated SMTPS" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# try to spoof the address with auth as une user and from another
function submissionLocalAuthNotSender {
    echo "" >> $LOG
    echo "===> Testing if you can send a SSMTP email to a valid recipient no auth" >> $LOG

    $SOFT -s "$SERVER" -p 587 -tls -a PLAIN -au "$TESTUSER" -ap "$PASS" \
        -t "$TESTUSER" -f "$USER" > $LOGP
    R=$?
    if [ $R -ne 24 ] ; then
        # error
        echo "===> Error: The server does allow id spoofing"

        echo "=========================================================" >> $LOG
        echo "ERROR: Can send a mail to a valid local email using" >> $LOG
        echo "       SUBMISSION and a valid authentication that does" >> $LOG
        echo "       not match the sender address" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server bounce emails" >> $LOG
        echo "         from a sender that authenticated as another user" >> $LOG
        echo "         this is a well known id spoofing technique," >> $LOG
        echo "         please check your configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "=========================================================" >> $LOG
    else
        # ok
        echo "===> Ok: The server does NOT allow id spoofing" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# Test attachment limits
function smtpAttachLimits {
    echo "" >> $LOG
    echo "===> Testing if you server honors attachments size limts" >> $LOG

    MS=`echo "$MESSAGESIZE*1024*1024*1.3" | bc -q | cut -d '.' -f 1`
    TMP=`mktemp`
    dd if=/dev/zero of=$TMP bs=1 count="$MS" 2>/dev/null
    $SOFT -s $SERVER --protocol SMTP -t $TESTUSER --attach "$TMP" > $LOGP
    rm $TMP
    R=$?
    if [ $R -ne 0 ] ; then
        # error
        echo "===> Error: Mail size restriction is not working (SMTP)"

        echo "========================================================" >> $LOG
        echo "ERROR: Can send a mail to a valid local email via SMTP" >> $LOG
        echo "       with an attachement bigger than the stated value" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server bounce emails" >> $LOG
        echo "         that are bigger that the maximium stated, size" >> $LOG
        echo "         please check your configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "========================================================" >> $LOG
    else
        # ok
        echo "===> Ok: Mail size restriction is working (SMTP)" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# Test attachment limits
function submissionAttachLimits {
    echo "" >> $LOG
    echo "===> Testing if you server honors attachments size limts (submission)" >> $LOG

    MS=`echo "$MESSAGESIZE*1024*1024*1.3" | bc -q | cut -d '.' -f 1`
    TMP=`mktemp`
    dd if=/dev/zero of=$TMP bs=1 count="$MS" 2>/dev/null
    $SOFT -s "$SERVER" -p 587 -tls -a PLAIN -au "$TESTUSER" -ap "$PASS" \
        -t "$TESTUSER" -f "$TESTUSER" --attach "$TMP" > $LOGP
    rm $TMP
    R=$?
    if [ $R -ne 0 ] ; then
        # error
        echo "===> Error: Mail size restriction is not working (SUBMISSION)"

        echo "========================================================" >> $LOG
        echo "ERROR: Can send a mail to a valid local email via SMTP" >> $LOG
        echo "       with an attachement bigger than the stated value" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server bounce emails" >> $LOG
        echo "         that are bigger that the maximium stated, size" >> $LOG
        echo "         please check your configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "========================================================" >> $LOG
    else
        # ok
        echo "===> Ok: Mail size restriction is working (SUBMISSION)" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# send a smtp email from internet to a only national account
function smtpFromInetToNationalRestrictedRecipient {
    echo "" >> $LOG
    echo "===> Testing if you server honors national restrictions (receive)" >> $LOG

    $SOFT -s $SERVER --protocol SMTP -t $NACUSER -f "testing@example.com" > $LOGP
    R=$?
    if [ $R -ne 24 ] ; then
        # error
        echo "===> Error: National restricted users can receive emails from outside"

        echo "======================================================" >> $LOG
        echo "ERROR: Can send a mail to a defined national account" >> $LOG
        echo "       from an international address: using SMTP (25)" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server block this" >> $LOG
        echo "         emails, as a policy, please check your" >> $LOG
        echo "         configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "======================================================" >> $LOG
    else
        # ok
        echo "===> Ok: National restricted users can't receive emails from outside" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# send a submission email with auth from a national user to inet
function submissionAuthFromNationalToInet {
    echo "" >> $LOG
    echo "===> Testing if you server honors national restrictions (send)" >> $LOG

    $SOFT -s "$SERVER" -p 587 -tls -a PLAIN -au "$NACUSER" -ap "$NACUSERPASSWD" \
    -t "fake@example.com" -f "$NACUSER" > $LOGP
    R=$?
    if [ $R -ne 24 ] ; then
        # error
        echo "===> Error: National restricted users can send emails to internet"

        echo "==========================================================" >> $LOG
        echo "ERROR: Can send a mail to an internet recipient from a" >> $LOG
        echo "       national limited account, using SUBMISSION (587)" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server block this as" >> $LOG
        echo "         the users is limited to national access only," >> $LOG
        echo "         please check your configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "==========================================================" >> $LOG
    else
        # ok
        echo "===> Ok: National restricted users can't send emails to internet" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# send a submissionauth email from nac sender to outside nac domian
function submissionAuthNAtionalToExternalNational {
    echo "" >> $LOG
    echo "===> Testing if you server honors national restrictions (send national)" >> $LOG

    $SOFT -s "$SERVER" -p 587 -tls -a PLAIN -au "$NACUSER" -ap "$NACUSERPASSWD" \
        -t "reject@nonexistent.cu" -f "$NACUSER" > $LOGP
    R=$?
    if [ $R -ne 0 ] ; then
        # error
        echo "===> Error: National restricted users can't send emails to national address"

        echo "==========================================================" >> $LOG
        echo "ERROR: Can't send a mail to a national recipient from a" >> $LOG
        echo "       national limited account, using SUBMISSION (587)" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's not the expected, your server must allow the" >> $LOG
        echo "         user to send the mail, please check your" >> $LOG
        echo "         configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "==========================================================" >> $LOG
    else
        # ok
        echo "===> Ok: National restricted users can send emails to national address" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# Send and submission email from a local user
function submissionAuthLocaltoInet {
    echo "" >> $LOG
    echo "===> Testing if you server honors local restrictions (send)" >> $LOG

    $SOFT -s "$SERVER" -p 587 -tls -a PLAIN -au "$LOCUSER" -ap "$LOCUSERPASSWORD" -t "fake@example.com" -f "$LOCUSER" > $LOGP
    R=$?
    if [ $R -ne 24 ] ; then
        # error
        echo "===> Error: Local restricted users can send emails to internet"

        echo "==========================================================" >> $LOG
        echo "ERROR: Can send a mail to an internet recipient from a" >> $LOG
        echo "       local limited account, using SUBMISSION (587)" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's expected that your server block this as" >> $LOG
        echo "         the users is limited to local access only," >> $LOG
        echo "         please check your configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "==========================================================" >> $LOG
    else
        # ok
        echo "===> Ok: Local restricted users can't send emails to internet" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# submission send local email to myself
function submissionAuthLocalToLocal {
    echo "" >> $LOG
    echo "===> Testing if you server honors local restrictions (receive)" >> $LOG

    $SOFT -s "$SERVER" -p 587 -tls -a PLAIN -au "$LOCUSER" -ap "$LOCUSERPASSWORD" \
        -t "$NACUSER" -f "$LOCUSER" > $LOGP
    R=$?
    if [ $R -ne 0 ] ; then
        # error
        echo "===> Error: Local restricted users can't send emails to local recipients"

        echo "==========================================================" >> $LOG
        echo "ERROR: Can't send a mail to an local recipient from a" >> $LOG
        echo "       local limited account, using SUBMISSION (587)" >> $LOG
        echo " " >> $LOG
        echo "COMMENT: It's not the expected, your server must allow the" >> $LOG
        echo "         user to send the mail, please check your" >> $LOG
        echo "         configuration" >> $LOG
        echo " " >> $LOG
        echo "Exit code: $R" >> $LOG
        echo "Logs follow" >> $LOG
        echo "==========================================================" >> $LOG
    else
        # ok
        echo "===> Ok: Local restricted users can send emails to local recipients" | tee -a $LOG

        # score point
        (( POINTS += 1 ))
    fi
    # sum the logs
    cat $LOGP >> $LOG

    # increase max points
    (( MAXPOINTS += 1 ))
}

# action ges here...
main $@